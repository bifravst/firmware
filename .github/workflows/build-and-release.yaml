name: Build and Release

on: push

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  version:
    name: Determine next release version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Determine next release version
        run: |
          npm ci
          NEXT_VERSION=`node .github/workflows/get-next-version.js`
          echo ${NEXT_VERSION} > version.conf

      - name: Publish version artifact
        uses: actions/upload-artifact@v2
        with:
          name: version
          path: version.conf

  docker:
    name: Prepare Docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Determine checksum for Docker image
        run: |
          DOCKER_CHECKSUM=`cat Dockerfile west.yml | sha256sum | awk '{ print $1 }' | tr -d '\n'`
          echo ${DOCKER_CHECKSUM}
          echo "::set-env name=DOCKER_CHECKSUM::${DOCKER_CHECKSUM}"

      - name: Check if Docker image exists
        id: check-docker-image
        continue-on-error: true
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: docker manifest inspect bifravst/firmware-build:${{ env.DOCKER_CHECKSUM }}

      - name: Build Docker image
        if: steps.check-docker-image.outcome == 'failure'
        run: docker build -t bifravst-firmware-docker .

      - name: Tag Docker image
        if: steps.check-docker-image.outcome == 'failure'
        run: |
          CHECKSUM=`cat Dockerfile west.yml | sha256sum | awk '{ print $1 }' | tr -d '\n'`
          docker tag bifravst-firmware-docker bifravst/firmware-build:${{ env.DOCKER_CHECKSUM }}

      - name: Publish Docker image
        if: steps.check-docker-image.outcome == 'failure'
        env:
          DOCKER_PASSWORD: ${{ secrets.CI_DOCKER_PASSWORD }}
        run: |
          docker login -u bifravst -p $DOCKER_PASSWORD
          docker images
          docker push bifravst/firmware-build:${{ env.DOCKER_CHECKSUM }}

  build:
    runs-on: ubuntu-latest

    needs: [version, docker]

    strategy:
      matrix:
        board: [thingy91_nrf9160ns, nrf9160dk_nrf9160ns]
        network: [nbiot, ltem]
        flag: [debug, nodebug]

    steps:
      - uses: actions/checkout@v1

      - name: Download version artifact
        uses: actions/download-artifact@v2
        with:
          name: version

      - name: Configure Version
        run: |
          NEXT_VERSION=`cat version.conf`
          echo $NEXT_VERSION
          echo "CONFIG_CAT_TRACKER_APP_VERSION=\"${NEXT_VERSION}-${{ matrix.board }}-${{ matrix.network }}-${{ matrix.flag }}\"" >> prj_${{ matrix.board }}.conf

      - name: Enable debug logs
        if: matrix.flag == 'debug'
        run: echo "CONFIG_LOG_MAX_LEVEL=4" >> prj_${{ matrix.board }}.conf

      - name: Set network mode to LTE-m
        if: matrix.network == 'ltem'
        run: |
          sed -i s/CONFIG_LTE_NETWORK_MODE_NBIOT_GPS=y/CONFIG_LTE_NETWORK_MODE_LTE_M_GPS=y/ prj_${{ matrix.board }}.conf
          sed -i s/CONFIG_LTE_LEGACY_PCO_MODE=y/CONFIG_LTE_LEGACY_PCO_MODE=n/ prj_${{ matrix.board }}.conf

      - name: Configure the AWS IoT broker hostname
        if: github.head_ref == ''
        env:
          BROKER_HOSTNAME: ${{ secrets.BROKER_HOSTNAME }}
        run: |
          echo "CONFIG_AWS_IOT_BROKER_HOST_NAME=\"${BROKER_HOSTNAME}\"" >> prj_${{ matrix.board }}.conf

      - name: Stub AWS IoT broker hostname (this is a PR)
        if: github.head_ref != ''
        run: |
          echo "CONFIG_AWS_IOT_BROKER_HOST_NAME=\"example.com\"" >> prj_${{ matrix.board }}.conf

      - run: cat prj_${{ matrix.board }}.conf

      - name: Determine checksum for Docker image
        run: |
          DOCKER_CHECKSUM=`cat Dockerfile west.yml | sha256sum | awk '{ print $1 }' | tr -d '\n'`
          echo ${DOCKER_CHECKSUM}
          echo "::set-env name=DOCKER_CHECKSUM::${DOCKER_CHECKSUM}"

      - run: docker pull bifravst/firmware-build:${{ env.DOCKER_CHECKSUM }}

      - name: Build
        run: |
          docker run --rm -v ${PWD}:/workdir/ncs/firmware bifravst/firmware-build:${{ env.DOCKER_CHECKSUM }} /bin/bash -c 'cd ncs/firmware; west build -p always -b ${{ matrix.board }}'
          cp -v build/zephyr/merged.hex ${GITHUB_WORKSPACE}/cat-tracker-${{ matrix.board }}-${{ matrix.network }}-${{ matrix.flag }}.hex
          cp -v build/zephyr/app_update.bin ${GITHUB_WORKSPACE}/cat-tracker-${{ matrix.board }}-${{ matrix.network }}-${{ matrix.flag }}-app_update.bin

      - name: Publish firmware as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.board }} ${{ matrix.network }} ${{ matrix.flag }} firmware
          path: |
            cat-tracker-${{ matrix.board }}-${{ matrix.network }}-${{ matrix.flag }}.hex
            cat-tracker-${{ matrix.board }}-${{ matrix.network }}-${{ matrix.flag }}-app_update.bin

  release:
    name: Release
    runs-on: ubuntu-latest

    needs: [build]

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
      
      - name: Semantic release
        continue-on-error: true
        run: |
          npx semantic-release
