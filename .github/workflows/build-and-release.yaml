name: Build and Release

on: push

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CR_PAT: ${{ secrets.CR_PAT }}

jobs:
  version:
    name: Determine next release version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: "14.x"

      - name: Determine next release version
        run: |
          npm ci
          NEXT_VERSION=`node .github/workflows/get-next-version.js`
          echo ${NEXT_VERSION} > version.conf

      - uses: actions/upload-artifact@v2
        with:
          name: version
          path: version.conf

  docker:
    name: Prepare Docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Determine checksum for Docker image
        run: |
          DOCKER_CHECKSUM=`cat Dockerfile west.yml | sha256sum | awk '{ print $1 }' | tr -d '\n'`
          echo "DOCKER_CHECKSUM=${DOCKER_CHECKSUM}" >> $GITHUB_ENV

      - name: Sign in to the GitHub Container Registry
        run: echo ${CR_PAT} | docker login ghcr.io -u USERNAME --password-stdin

      - name: Check if Docker image exists
        id: check-docker-image
        continue-on-error: true
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: docker manifest inspect ghcr.io/bifravst/firmware-builder:${{ env.DOCKER_CHECKSUM }}

      - name: Build Docker image
        if: steps.check-docker-image.outcome == 'failure'
        run: docker build -t bifravst-firmware-docker .

      - name: Tag Docker image
        if: steps.check-docker-image.outcome == 'failure'
        run: |
          CHECKSUM=`cat Dockerfile west.yml | sha256sum | awk '{ print $1 }' | tr -d '\n'`
          docker tag bifravst-firmware-docker ghcr.io/bifravst/firmware-builder:${{ env.DOCKER_CHECKSUM }}

      - name: Publish Docker image
        if: steps.check-docker-image.outcome == 'failure'
        run: |
          docker images
          docker push ghcr.io/bifravst/firmware-builder:${{ env.DOCKER_CHECKSUM }}

  build:
    runs-on: ubuntu-latest

    needs: [version, docker]

    strategy:
      matrix:
        board: [thingy91_nrf9160ns, nrf9160dk_nrf9160ns]
        network: [nbiot, ltem]
        loglevel: [debug, nodebug]

    env:
      PROD_ENV_BROKER_HOSTNAME: ${{ secrets.BROKER_HOSTNAME }}

    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: version

      - name: Configure Version
        run: |
          NEXT_VERSION=`cat version.conf`
          echo "CONFIG_CAT_TRACKER_APP_VERSION=\"${NEXT_VERSION}-${{ matrix.board }}-${{ matrix.network }}-${{ matrix.loglevel }}\"" >> prj_${{ matrix.board }}.conf

      - name: Enable debug logs
        if: matrix.loglevel == 'debug'
        run: echo "CONFIG_LOG_MAX_LEVEL=4" >> prj_${{ matrix.board }}.conf

      - name: Set network mode to LTE-m
        if: matrix.network == 'ltem'
        run: |
          sed -i s/CONFIG_LTE_NETWORK_MODE_NBIOT_GPS=y/CONFIG_LTE_NETWORK_MODE_LTE_M_GPS=y/ prj_${{ matrix.board }}.conf

      - name: Configure the AWS IoT broker hostname
        run: |
          echo "CONFIG_AWS_IOT_BROKER_HOST_NAME=\"${PROD_ENV_BROKER_HOSTNAME}\"" >> prj_${{ matrix.board }}.conf

      - run: cat prj_${{ matrix.board }}.conf

      - name: Determine checksum for Docker image
        run: |
          DOCKER_CHECKSUM=`cat Dockerfile west.yml | sha256sum | awk '{ print $1 }' | tr -d '\n'`
          echo "DOCKER_CHECKSUM=${DOCKER_CHECKSUM}" >> $GITHUB_ENV

      - name: Sign in to the GitHub Container Registry
        run: echo ${CR_PAT} | docker login ghcr.io -u USERNAME --password-stdin

      - run: docker pull ghcr.io/bifravst/firmware-builder:${{ env.DOCKER_CHECKSUM }}

      - name: Build
        run: |
          docker run --rm -v ${PWD}:/workdir/ncs/firmware ghcr.io/bifravst/firmware-builder:${{ env.DOCKER_CHECKSUM }} /bin/bash -c 'cd ncs/firmware && west build -p always -b ${{ matrix.board }}'

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.board }}-${{ matrix.network }}-${{ matrix.loglevel }}
          path: |
            build/zephyr/merged.hex
            build/zephyr/app_update.bin

  e2e:
    name: End to End tests
    runs-on: ubuntu-latest

    needs: [version, docker]

    env:
      FIRMWARECI_AWS_ACCESS_KEY_ID: ${{ secrets.CI_FIRMWARECI_AWS_ACCESS_KEY_ID }}
      FIRMWARECI_AWS_SECRET_ACCESS_KEY: ${{ secrets.CI_FIRMWARECI_AWS_SECRET_ACCESS_KEY }}
      FIRMWARECI_BUCKET_NAME: ${{ secrets.CI_FIRMWARECI_BUCKET_NAME }}
      FIRMWARECI_REGION: eu-central-1
      FIRMWARECI_DEVICE_ID: ${{ secrets.CI_FIRMWARECI_DEVICE_ID }}
      TESTENV_AWS_ACCESS_KEY_ID: ${{ secrets.CI_AWS_ACCESS_KEY_ID }}
      TESTENV_AWS_SECRET_ACCESS_KEY: ${{ secrets.CI_AWS_SECRET_ACCESS_KEY }}
      TESTENV_AWS_DEFAULT_REGION: eu-central-1
      STACK_NAME: firmware-ci-runner
      CI: 1
      FORCE_COLOR: 3

    steps:
      - uses: actions/checkout@v1

      - uses: actions/download-artifact@v2
        with:
          name: version

      - name: Configure Version
        run: |
          NEXT_VERSION=`cat version.conf`
          echo "CONFIG_CAT_TRACKER_APP_VERSION=\"${NEXT_VERSION}-thingy91_nrf9160ns-ltem\"" >> prj_thingy91_nrf9160ns.conf

      - name: Enable debug logs
        run: echo "CONFIG_LOG_MAX_LEVEL=4" >> prj_thingy91_nrf9160ns.conf

      - name: Set network mode to LTE-m
        run: |
          sed -i s/CONFIG_LTE_NETWORK_MODE_NBIOT_GPS=y/CONFIG_LTE_NETWORK_MODE_LTE_M_GPS=y/ prj_thingy91_nrf9160ns.conf

      - name: Configure the AWS IoT broker hostname
        run: |
          BROKER_HOSTNAME=`AWS_ACCESS_KEY_ID=${{ env.TESTENV_AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ env.TESTENV_AWS_SECRET_ACCESS_KEY }} AWS_DEFAULT_REGION=${{ env.TESTENV_AWS_DEFAULT_REGION }} aws iot describe-endpoint --endpoint-type iot:Data-ATS | jq '.endpointAddress' -r | tr -d '\n'`
          echo "TEST_ENV_BROKER_HOSTNAME=${BROKER_HOSTNAME}" >> $GITHUB_ENV
          echo "CONFIG_AWS_IOT_BROKER_HOST_NAME=\"${BROKER_HOSTNAME}\"" >> prj_thingy91_nrf9160ns.conf

      - name: Set MQTT client ID to test device
        run: |
          JOB_ID=`uuidgen`
          echo "JOB_ID=${JOB_ID}" >> $GITHUB_ENV
          echo "CONFIG_USE_CUSTOM_MQTT_CLIENT_ID=y" >> prj_thingy91_nrf9160ns.conf
          echo "CONFIG_AWS_IOT_CLIENT_ID_MAX_LEN=36" >> prj_thingy91_nrf9160ns.conf
          echo "CONFIG_MQTT_CLIENT_ID=\"${JOB_ID}\"" >> prj_thingy91_nrf9160ns.conf

      - run: cat prj_thingy91_nrf9160ns.conf

      - name: Determine checksum for Docker image
        run: |
          DOCKER_CHECKSUM=`cat Dockerfile west.yml | sha256sum | awk '{ print $1 }' | tr -d '\n'`
          echo "DOCKER_CHECKSUM=${DOCKER_CHECKSUM}" >> $GITHUB_ENV

      - name: Sign in to the GitHub Container Registry
        run: echo ${CR_PAT} | docker login ghcr.io -u USERNAME --password-stdin

      - run: docker pull ghcr.io/bifravst/firmware-builder:${{ env.DOCKER_CHECKSUM }}

      - name: Build
        run: |
          docker run --rm -v ${PWD}:/workdir/ncs/firmware ghcr.io/bifravst/firmware-builder:${{ env.DOCKER_CHECKSUM }} /bin/bash -c 'cd ncs/firmware && west build -p always -b thingy91_nrf9160ns'

      - name: Keep certificates around
        uses: actions/cache@v2
        with:
          path: ./certificates
          key: certificates

      - uses: actions/setup-node@v1
        with:
          node-version: "14.x"

      - name: Run on Firmware CI
        run: |
          npm ci
          npm run test:e2e

      - name: Remove device certificates
        run: rm -v ./certificates/*/device-*

  release:
    name: Release
    runs-on: ubuntu-latest

    needs: [build, e2e]

    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2

      - run: npx semantic-release
        continue-on-error: true
